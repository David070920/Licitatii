name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'  # Daily data ingestion at 6 AM UTC

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-testing
        ENVIRONMENT: testing
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html tests/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  # Frontend Testing and Build
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
      continue-on-error: true  # Don't fail build on linting errors
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Build frontend
      env:
        VITE_API_URL: ${{ vars.API_BASE_URL || 'https://api.procurement-platform.me' }}
        VITE_APP_NAME: "Romanian Procurement Platform"
      run: npm run build

  # Deploy to Railway (Backend)
  deploy-backend:
    needs: [backend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Railway CLI
      run: npm install -g @railway/cli
    
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway up --detach
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Verify deployment
      env:
        API_BASE_URL: ${{ vars.API_BASE_URL || 'https://api.procurement-platform.me' }}
      run: |
        curl -f $API_BASE_URL/health || exit 1
        echo "‚úÖ Backend deployment successful"

  # Deploy to Vercel (Frontend)
  deploy-frontend:
    needs: [frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build and Deploy to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VITE_API_URL: ${{ vars.API_BASE_URL || 'https://api.procurement-platform.me' }}
        VITE_APP_NAME: "Romanian Procurement Platform"
      run: |
        npm install -g vercel
        vercel build --token $VERCEL_TOKEN --prod --yes
        vercel deploy --prebuilt --token $VERCEL_TOKEN --prod --yes
    
    - name: Verify frontend deployment
      env:
        FRONTEND_URL: ${{ vars.FRONTEND_URL || 'https://procurement-platform.me' }}
      run: |
        sleep 30
        curl -I $FRONTEND_URL || exit 1
        echo "‚úÖ Frontend deployment successful"

  # Notify deployment status
  notify-deployment:
    needs: [deploy-backend, deploy-frontend]
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Send Slack Notification
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [[ "${{ needs.deploy-backend.result }}" == "success" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          STATUS="Success ‚úÖ"
          COLOR="good"
        else
          STATUS="Failed ‚ùå"
          COLOR="danger"
        fi
        
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"attachments\": [
              {
                \"color\": \"$COLOR\",
                \"title\": \"üöÄ Romanian Procurement Platform Deployment\",
                \"text\": \"Deployment Status: $STATUS\",
                \"fields\": [
                  {\"title\": \"Backend\", \"value\": \"${{ needs.deploy-backend.result }}\", \"short\": true},
                  {\"title\": \"Frontend\", \"value\": \"${{ needs.deploy-frontend.result }}\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true},
                  {\"title\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"short\": true}
                ]
              }
            ]
          }" \
          $SLACK_WEBHOOK